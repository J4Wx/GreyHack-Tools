dictionaryGet = function (asString)
	c = get_shell.host_computer;
	dictionaryFile = c.File(home_dir + "/dictionary.txt");
	if not dictionaryFile then
		o = c.touch(home_dir, "dictionary.txt");
	end if;
	dictionaryFile = c.File(home_dir + "/dictionary.txt");
	dictionaryContent = dictionaryFile.content;
	if not asString then
	end if;
	return dictionaryContent;
end function

dictionaryWrite = function (newContent)
	c = get_shell.host_computer;
	dictionaryFile = c.File(home_dir + "/dictionary.txt");
	if not dictionaryFile then
		o = c.touch(home_dir, "dictionary.txt");
	end if;
	dictionaryFile = c.File(home_dir + "/dictionary.txt");
	
	dictionaryFile.set_content(newContent);
end function

dictionaryLookup = function (md5)
	dictionaryContent = dictionaryGet();
	entries = {};
	
	for entry in dictionaryContent
		e = entry.split(":");
		if e.len == 2 then 
			hash = e[0];
			pass = e[1];
			
			entries.push(hash);
			entries[hash] = pass;
		end if;
	end for
	
	hashes = entries.indexes;
	exists = hashes.indexOf(md5);
	
	if exists != null then
		return entries[md5];
	end if;
	return null;
end function;

dictionaryAdd = function (md5, password)
	DictionaryContent = dictionaryGet(true);
	DictionaryContent = DictionaryContent + "\n" + md5 + ":" + password;
	dictionaryWrite(DictionaryContent);
end function;

targetFile = params[0];
c = get_shell.host_computer
curPath = c.current_path;

if not targetFile[0] == "/" then
	targetFile = curPath + "/" + targetFile;
end if;

//LOAD CRYTPO
crypt = include_lib("/lib/crypto.so")
if not crypt then
	currentPath = get_shell.host_computer.current_path
	crypt = include_lib(currentPath + "/crypto.so")
end if

if not crypt then 
	exit("Error: Can't find crypto.so library in the /lib path or the current folder")
end if

targetFile = c.File(targetFile);

if not targetFile then
	exit("Couldn't open " + targetFile);
end if;

targetContent = targetFile.content;

print(targetContent);

rows = targetContent.split("\n");
cleanRows = [];

targetSelect = "ID USERNAME\n";

i = 0;
for row in rows
	entry = row.split(":");
	if entry.len == 2 then
		cleanRows.push(row);
		targetSelect = targetSelect + i + " " + entry[0] + "\n";
	end if;
end for;

print("// DECIPHERING " + targetFile.path + " \\");
print("Total Users: " + cleanRows.len);
print("");
print(format_columns(targetSelect));

getIdInput = function ()
	input = user_input("Select a User ID (e.g., 0): ", false);
	output = input.to_int
	if typeof(output) == "number" then
		if output > -1 then
			if output < cleanRows.len then
				return output;
			end if
		end if
	end if;
	print("Input must be a valid ID from the above list.");
	return getIdInput();
end function

userId = getIdInput();
targetEntry = cleanRows[userId].split(":");
username = targetEntry[0];
hash = targetEntry[1];

print("// CRACKING PASSWORD FOR: " + username + " \\");

password = dictionaryLookup(hash);
if not password then
	password = crypt.decipher(username, hash);
	dictionaryAdd(hash, password);
end if;

print("Password: " + password);
print("// COMPLETE \\");