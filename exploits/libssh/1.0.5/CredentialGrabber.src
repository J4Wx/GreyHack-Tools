address = params[0];
port = params[1].to_int;

print("// CREDENTIAL GRABBING FROM " + address + ":" + port + " \\");

// LOAD METAXPLOIT
mx = include_lib("/lib/metaxploit.so")
if not mx then
	currentPath = get_shell.host_computer.current_path
	mx = include_lib(currentPath + "/metaxploit.so")
end if

if not mx then 
	exit("Error: Can't find metaxploit.so library in the /lib path or the current folder")
end if;

//LOAD CRYTPO
crypt = include_lib("/lib/crypto.so")
if not crypt then
	currentPath = get_shell.host_computer.current_path
	crypt = include_lib(currentPath + "/crypto.so")
end if

if not crypt then 
	exit("Error: Can't find crypto.so library in the /lib path or the current folder")
end if

con = mx.net_use(address, port);

if not con then
	exit("Error: Couldn't connect to remote port.");
end if;

ssh = con.dump_lib;

if not ssh then
	exit("Error: Couldn't dump lib.");
end if;

print("libssh version: " + ssh.version);

res = ssh.overflow("0x28520D7B", "qualedt");

if not typeof(res) == "computer" then
	exit("Error: Expected Computer. Got " + typeof(res));
end if;

passwd = res.File("/etc/passwd");

if not passwd then
	exit("Error - /etc/passwd does not exist on the target.");
end if

if not passwd.has_permission("r") then
	exit("Error - /etc/passwd has been hardened.");
end if

if passwd.is_binary then
	exit("Error - /etc/passwd is a binary file?");
end if

entries = passwd.content.split("\n");
fixedEntries = {};

for entry in entries
	e = entry.split(":");
	if e.len == 2 then
		fixedEntries[e[0]] = e[1];
	end if;
end for;

print("");
users = [];
userOutput = "ID NAME\n";
i = 0;
for index in fixedEntries.indexes
	users.push(index);
	userOutput = userOutput + i + " " + index + "\n";
	i = i + 1;
end for;

print(format_columns(userOutput));

getIdInput = function ()
	input = user_input("Select a User ID (e.g., 0): ", false);
	output = input.to_int
	if typeof(output) == "number" then
		if output > -1 then
			if output < users.len then
				return output;
			end if
		end if
	end if;
	print("Input must be a valid ID from the above list.");
	return getIdInput();
end function

user_id = getIdInput();

username = users[user_id];
hash = fixedEntries[username];

password = crypt.decipher(username, hash);
print("Username: " + username);
print("Password: " + password);
print("// SUCCESS \\");

