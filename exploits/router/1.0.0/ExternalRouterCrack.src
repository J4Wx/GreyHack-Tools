address = params[0];

// LOAD METAXPLOIT
mx = include_lib("/lib/metaxploit.so")
if not mx then
	currentPath = get_shell.host_computer.current_path
	mx = include_lib(currentPath + "/metaxploit.so")
end if

if not mx then 
	exit("Error: Can't find crypto.so library in the /lib path or the current folder")
end if;

//LOAD CRYTPO
crypt = include_lib("/lib/crypto.so")
if not crypt then
	currentPath = get_shell.host_computer.current_path
	crypt = include_lib(currentPath + "/crypto.so")
end if

if not crypt then 
	exit("Error: Can't find crypto.so library in the /lib path or the current folder")
end if

net = mx.net_use(address);

routerLib = net.dump_lib;
router = get_router(address);

if not (routerLib and router) then
	exit("Failed to connect to target router.");
end if;

print("// CONNECTED TO ROUTER " + address + " \\");
print("Router Kernel Version: " + routerLib.version);
print("Router Hosts: " + router.computers_lan_ip.len);
print("");

i = 0;
computersOutput = "ID LAN_IP\n";
for computer in router.computers_lan_ip
	computersOutput = computersOutput + i + " " + computer + "\n";
	i = i + 1;
end for;
print(format_columns(computersOutput));

getIdInput = function ()
	input = user_input("Select a LAN host (e.g., 0): ", false);
	output = input.to_int
	if typeof(output) == "number" then
		if output > -1 then
			if output < router.computers_lan_ip.len then
				return output;
			end if
		end if
	end if;
	print("Input must be a valid ID from the above list.");
	return getIdInput();
end function

target = router.computers_lan_ip[getIdInput()];

print("// TARGET: " + target + " \\");

result = routerLib.overflow("0x46F70CE1", "throw", target);

if typeof(result) != "computer" then
	exit("Error - Expected: Computer. Found: " + typeof(result));
end if

passwd = result.File("/etc/passwd");

if not passwd then
	exit("Error - /etc/passwd does not exist on the target.");
end if

if not passwd.has_permission("r") then
	exit("Error - /etc/passwd has been hardened.");
end if

if passwd.is_binary then
	exit("Error - /etc/passwd is a binary file?");
end if

entries = passwd.content.split("\n");

userOutput = "USERNAME PASSWORD\n";
for entry in entries
	user = entry.split(":");
	if user.len == 2 then
		password = crypt.decipher(user[0], user[1]);
	
		userOutput = userOutput + user[0] + " " + password + "\n";
	end if
end for

print(format_columns(userOutput));
print("// SUCCESS \\");